@import "compass/css3";
@import "animation";

@mixin spinner-clock($name: null, $size: 35px) {

   $class: "";
   @if $name { $class: ".#{$name}"; };

   // Need to work with whole numbers
   // when divided by 2, otherwise the wedge
   // will be offset from the center which is distracting
   @if $size%2 > 0 { $size: $size+1; };

   $border: ceil(10 * $size / 80);
   $half: $size/2;

   .spinner.clock#{$class} {
      position: relative;
      height: $size+$border*2;
      width: $size+$border*2;
   }

   .spinner.clock#{$class} > div {
      position: absolute;
      border-style: solid;
      background-color: transparent;
   }

   .spinner.clock#{$class} .circle {
      width: $size;
      height: $size;
      border: {
         width: $border;
         color: #555;
      }
      @include border-radius($size);
   }

   .spinner.clock#{$class} .wedge {
      width: 0;
      height: 0;
      border: {
         width: $half+$border;
         color: #999 transparent transparent transparent;
      }
      @include border-radius($half+$border);
      @include animation(clock-spinright 1250ms linear 0s infinite);


      // This does create a minor artifact in FF.  The idea was
      // to adjust the size of the wedge by sliding another semi-circle
      // over it to make it look smaller.  Comment it out or remove this section
      // if you don't like it.
      // or, even better, add a parameter to the mixin to not use it.

      &:before, &:after {
         content: ' ';
         position: absolute;
         margin: 0;
         top: -1*($half+$border);
         left: -1*($half+$border);
         width: 0;
         height: 0;
         border: {
            style: solid;
            width: $half+$border;
            color: transparent #fff #fff #fff;
         }
         @include border-radius($half+$border);
      }

      &:before {
         @include rotate(-30deg);
      }

      &:after {
         @include rotate(20deg);
      }

   }

   .spinner.clock#{$class} .arc {
      width: $size;
      height: $size;
      border: {
         width: $border;
         color: transparent transparent #bbb transparent;
      }
      @include border-radius($size);
      @include animation(clock-spinleft 750ms linear 0s infinite);
   }

}

@include keyframes(clock-spinleft) {
    from { @include rotate(0deg); }
    to { @include rotate(-360deg); }
}

@include keyframes(clock-spinright) {
    from { @include rotate(0deg); }
    to { @include rotate(360deg); }
}